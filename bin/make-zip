#!/bin/bash
set -e  # Exit immediately if a command exits with a non-zero status

if [ ! -f Cargo.toml ]; then
    echo "error: Run in cargo root directory." >&2;
    exit 1;
fi
# Configuration
# app_name="your_app_name"  # Replace with your Rust binary name
app_name="$(cargo pkgid | sed 's/#.*//;s/^.*\///;')"
version="$(cargo pkgid | sed 's/^.*#//;')"
output_dir="$app_name-$version-win"
zip_name="$output_dir.zip"

# Ensure release build
echo "Building the Rust application..."
cargo build --release || { echo "Build failed" >&2; exit 2; }

# Create output directory
mkdir -p "$output_dir"

# Copy necessary files
echo "Preparing files..."
cp "target/release/$app_name.exe" "$output_dir/"
cp -a "assets" "$output_dir/"
rm $output_dir/assets/*.aup3
rm $output_dir/assets/*.aseprite
# cp README.md "$output_dir/" 2>/dev/null
# cp LICENSE "$output_dir/" 2>/dev/null

# Create the zip archive
echo "Creating zip file..."
cd "$output_dir" || exit 3
zip -r "../$zip_name" *
cd ..

# Cleanup (optional)
rm -rf "$output_dir"

echo "Packaging complete: $zip_name"
